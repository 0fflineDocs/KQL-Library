[
  {
    "title": "Third-Party Browser Network Protection Blocks",
    "description": "Monitors Exploit Guard Network Protection blocks in third-party browsers, categorized by block type (IoC, Conditional Access, Network Protection, CASB)",
    "query": "DeviceEvents\n| where Timestamp > ago(7d)\n| where ActionType == \"ExploitGuardNetworkProtectionBlocked\"\n| extend ParsedFields=parse_json(AdditionalFields)\n| summarize MDE_IoC = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", RemoteUrl), ResponseCategory=tostring(ParsedFields.ResponseCategory) == \"CustomBlockList\"), \nMDE_WCF = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", RemoteUrl), ResponseCategory=tostring(ParsedFields.ResponseCategory) == \"CustomPolicy\"),\nMDE_NP = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", ParsedFields.ResponseCategory, \" : \", RemoteUrl), ResponseCategory=tostring(ParsedFields.ResponseCategory) in (\"CmdCtrl\", \"Malicious\")),\nMDA_CASB = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", RemoteUrl), ResponseCategory=tostring(ParsedFields.ResponseCategory) == \"CasbPolicy\") by DeviceId, DeviceName\n| extend MDE_IoC_case = array_length(MDE_IoC)\n| extend MDE_WCF_case = array_length(MDE_WCF)\n| extend MDE_NP_case = array_length(MDE_NP)\n| extend MDA_CASB_case = array_length(MDA_CASB)\n| project DeviceId, DeviceName, MDE_IoC_case, MDE_NP_case, MDE_WCF_case, MDA_CASB_case,  MDE_IoC, MDE_NP, MDE_WCF,  MDA_CASB",
    "category": "Defender for Endpoint",
    "subCategory": "SmartScreen",
    "tags": [
      "Network Protection",
      "browser",
      "ExploitGuard"
    ]
  },
  {
    "title": "SmartScreen Application Blocks",
    "description": "Detects application execution blocks by SmartScreen over the past 7 days, filtering out test files",
    "query": "let minTimeRange = ago(7d);\nDeviceEvents\n    | where ActionType == \"SmartScreenAppWarning\" and Timestamp > minTimeRange\n            // Filter out SmartScreen test files downloaded from https://demo.smartscreen.msft.net/\n            and not (FileName startswith \"knownmalicious\" and FileName endswith \".exe\")\n    | extend ParsedFields=parse_json(AdditionalFields)\n    | project Timestamp, DeviceName, BlockedFileName=FileName, SHA1, Experience=tostring(ParsedFields.Experience), ActivityId=tostring(ParsedFields.ActivityId), InitiatingProcessFileName",
    "category": "Defender for Endpoint",
    "subCategory": "SmartScreen",
    "tags": [
      "SmartScreen",
      "malware"
    ]
  },
  {
    "title": "SmartScreen URL Warnings",
    "description": "Tracks URL warnings from SmartScreen across all browsers in the past 7 days, excluding test URLs",
    "query": "let minTimeRange = ago(7d);\n DeviceEvents\n    | where ActionType == \"SmartScreenUrlWarning\" and Timestamp > minTimeRange\n            // Filter out SmartScreen test URLs under https://demo.smartscreen.msft.net/\n            and RemoteUrl !startswith \"https://demo.smartscreen.msft.net/\" \n    | extend ParsedFields=parse_json(AdditionalFields)\n    | project Timestamp, DeviceName, BlockedUrl=RemoteUrl, Recommendation=tostring(ParsedFields.Recommendation), Experience=tostring(ParsedFields.Experience), ActivityId=tostring(ParsedFields.ActivityId)",
    "category": "Defender for Endpoint",
    "subCategory": "SmartScreen",
    "tags": [
      "SmartScreen",
      "URL warnings",
      "phishing",
      "malicious sites"
    ]
  },
  {
    "title": "Edge Browser SmartScreen Blocks",
    "description": "Monitors Microsoft Edge SmartScreen URL blocks categorized by block type (IoC, Web Content Filtering, CASB, SmartScreen)",
    "query": "DeviceEvents\n| where Timestamp > ago(7d)\n| where ActionType == \"SmartScreenUrlWarning\"\n| project-reorder AdditionalFields, RemoteUrl\n| extend ParsedFields=parse_json(AdditionalFields)\n| summarize MDE_IoC = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", RemoteUrl), Experience=tostring(ParsedFields.Experience) == \"CustomBlockList\"), \nMDE_WCF = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", RemoteUrl), Experience=tostring(ParsedFields.Experience) == \"CustomPolicy\"),\nMDA_CASB = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", RemoteUrl), Experience=tostring(ParsedFields.Experience) == \"CasbPolicy\"),\nEdge_SS = make_list_if(strcat(format_datetime(Timestamp,'yyyy-M-dd H:mm:ss'), \" : \", ParsedFields.Experience,\" : \", RemoteUrl), Experience=tostring(ParsedFields.Experience) in (\"Malicious\", \"Phishing\", \"Exploit\", \"Untrusted\")) by DeviceId, DeviceName\n| extend MDE_IoC_case = array_length(MDE_IoC)\n| extend MDE_WCF_case = array_length(MDE_WCF)\n| extend MDA_CASB_case = array_length(MDA_CASB)\n| extend Edge_SS_case = array_length(Edge_SS)\n| project DeviceId, DeviceName, MDE_IoC_case, MDA_CASB_case, MDE_WCF_case, Edge_SS_case, MDE_IoC, MDE_WCF,  MDA_CASB, Edge_SS",
    "category": "Defender for Endpoint",
    "subCategory": "SmartScreen",
    "tags": [
      "Edge",
      "SmartScreen",
      "URL blocking",
      "browser protection"
    ]
  },
  {
    "title": "SmartScreen and Network Protection Bypasses",
    "description": "Identifies instances where users have overridden SmartScreen warnings or bypassed Network Protection blocks",
    "query": "DeviceEvents\n| where Timestamp > ago(7d)\n| where ActionType in (\"SmartScreenUserOverride\", \"NetworkProtectionUserBypassEvent\")\n| extend Browser = case(\n        InitiatingProcessFileName has \"msedge\", \"Edge\",\n        InitiatingProcessFileName has \"chrome\", \"Chrome\", \n        InitiatingProcessFileName has \"firefox\", \"Firefox\",\n        InitiatingProcessFileName has \"opera\", \"Opera\",\n\"3rd party browser\")\n| project Timestamp, DeviceId, DeviceName, ActionType, Browser, RemoteUrl",
    "category": "Defender for Endpoint",
    "subCategory": "SmartScreen",
    "tags": [
      "user override",
      "security warning"
    ]
  },
  {
    "title": "Teams SmartScreen URL Warnings",
    "description": "Monitors SmartScreen URL warnings specifically for links opened through Microsoft Teams",
    "query": "DeviceEvents\n| where ActionType == \"SmartScreenUrlWarning\"\n| join (DeviceEvents | where ActionType == \"BrowserLaunchedToOpenUrl\" | extend OpeningProcess = InitiatingProcessFileName) on DeviceId, RemoteUrl\n| extend TeamsUser = InitiatingProcessAccountUpn1\n| where OpeningProcess =~ \"teams.exe\"\n| project-reorder DeviceName, RemoteUrl, OpeningProcess, TeamsUser",
    "category": "Defender for Endpoint",
    "subCategory": "SmartScreen",
    "tags": [
      "Teams",
      "phishing"
    ]
  }
]
